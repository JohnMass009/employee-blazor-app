@using EmployeeBlazorApp.Services.Greating
@using System.Timers
@page "/"
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation

<MudContainer>
    <MudText Typo="Typo.h4">@greetingMessage</MudText>
</MudContainer>

@code {
    private string greetingMessage = string.Empty;
    private Timer timer;
    private int lastCheckedHour = -1;
    private bool _isActive = true;

    protected override async Task OnInitializedAsync()
    {
        Navigation.LocationChanged += OnNavigated;

        await UpdateGreetingAndCheckTime();
        StartTimer();
    }

    private void StartTimer()
    {
        timer = new Timer(60000);
        timer.Elapsed += async (sender, e) =>
        {
            await InvokeAsync(UpdateGreetingAndCheckTime);
        };
        timer.Start();
    }

    private async Task UpdateGreetingAndCheckTime()
    {
        var currentHour = DateTime.Now.Hour;

        if (currentHour != lastCheckedHour)
        {
            lastCheckedHour = currentHour;
            UpdateGreeting();
            await InvokeAsync(StateHasChanged);
        }
    }

    private void UpdateGreeting()
    {
        IGreetingStrategy greetingStrategy = lastCheckedHour switch
        {
            >= 6 and < 10 => new MorningGreetingStrategy(),
            >= 10 and < 17 => new DayGreetingStrategy(),
            >= 17 and < 22 => new EveningGreetingStrategy(),
            _ => new NightGreetingStrategy()
        };

        greetingMessage = new GreetingService(greetingStrategy).GetGreeting();
    }

    private void OnNavigated(object? sender, LocationChangedEventArgs e)
    {
        _isActive = Navigation.Uri == Navigation.BaseUri;

        if (!_isActive)
        {
            timer?.Dispose();
            timer = null;
        }
        else
        {
            StartTimer();
        }
    }

    public async ValueTask DisposeAsync()
    {
        Navigation.LocationChanged -= OnNavigated;
        _isActive = false;
        timer?.Dispose();
    }
}
